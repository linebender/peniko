[package]
name = "peniko"
version = "0.1.1"
license = "Apache-2.0 OR MIT"
edition = "2021"
description = "Primitive types for styling vector graphics"
keywords = ["graphics", "vector", "style"]
categories = ["graphics"]
repository = "https://github.com/linebender/peniko"
readme = "README.md"
# We support from Rust 1.70 so that CI uses the sparse protocol.
# Keep in sync with RUST_MIN_VER in .github/workflows/ci.yml and with the relevant README.md files.
# and with the MSRV in the `Unreleased` section of CHANGELOG.md.
rust-version = "1.70"

[features]
default = ["std"]
std = ["kurbo/std"]
libm = ["kurbo/libm"]
mint = ["kurbo/mint"]
serde = ["smallvec/serde", "kurbo/serde", "dep:serde_bytes", "dep:serde"]

[package.metadata.docs.rs]
features = ["serde"]

[dependencies]
# NOTE: Make sure to keep this in sync with the version badge in README.md
kurbo = { version = "0.11.0", default-features = false }
smallvec = "1.13.2"

[dependencies.serde]
version = "1.0.203"
optional = true
default-features = false
features = ["alloc", "derive"]

[dependencies.serde_bytes]
version = "0.11.14"
optional = true
default-features = false
features = ["alloc"]

[lints]
rust.unsafe_code = "forbid"

rust.keyword_idents_2024 = "forbid"
rust.non_ascii_idents = "forbid"
rust.unsafe_op_in_unsafe_fn = "forbid"
rust.non_local_definitions = "forbid"

rust.unexpected_cfgs = "warn"
rust.unused_lifetimes = "warn"
rust.unit_bindings = "warn"
rust.unused_import_braces = "warn"
rust.trivial_numeric_casts = "warn"
rust.unused_macro_rules = "warn"
rust.variant_size_differences = "warn"
rust.let_underscore_drop = "warn"
rust.missing_debug_implementations = "warn"
rust.unused_qualifications = "warn"
rust.single_use_lifetimes = "warn"
rust.missing_docs = "warn"
rust.unreachable_pub = "warn"
rust.unnameable_types = "warn"
rust.elided_lifetimes_in_paths = "warn"

clippy.allow_attributes_without_reason = "warn"
clippy.collection_is_never_read = "warn"
clippy.debug_assert_with_mut_call = "warn"
clippy.doc_markdown = "warn"
clippy.fn_to_numeric_cast_any = "forbid"
clippy.infinite_loop = "warn"
clippy.large_include_file = "warn"
clippy.large_stack_arrays = "warn"
clippy.mismatching_type_param_order = "warn"
clippy.missing_fields_in_debug = "warn"
clippy.same_functions_in_if_condition = "warn"
clippy.semicolon_if_nothing_returned = "warn"
clippy.should_panic_without_expect = "warn"
clippy.unseparated_literal_suffix = "warn"
clippy.dbg_macro = "warn"
clippy.match_same_arms = "warn"
clippy.missing_assert_message = "warn"
clippy.return_self_not_must_use = "warn"
clippy.wildcard_imports = "warn"
clippy.todo = "warn"
clippy.missing_errors_doc = "warn"
clippy.missing_panics_doc = "warn"
clippy.partial_pub_fields = "warn"
clippy.shadow_unrelated = "warn"
clippy.use_self = "warn"

# This catches duplicated dependencies in the tree, which we don't have much control over
# We should use cargo deny for this, anyway
clippy.cargo = { level = "warn", priority = -1 }

# Lints which we set in `lib.rs`, instead of at a package level.

# False positives with example targets - https://github.com/rust-lang/rust/issues/57274
# rust.unused_crate_dependencies = "warn"
# Examples often do want to print
# clippy.print_stdout = "warn" # Note that this is allowed in Masonry
# clippy.print_stderr = "warn" # Note that this is allowed in Masonry

## Explicit per-crate exceptions, should be manually checked occasionally.
# Most enums are correctly exhaustive, as this is a vocabulary crate.
# clippy.exhaustive_enums = "warn"
# There are lots of conversion to u8 color field, which in degenerate cases might not work
# properly, but generally are fine.
# E.g. `with_alpha_factor` sets the alpha to `0` for a negative provided `alpha`
# clippy.cast_possible_truncation = "warn"
